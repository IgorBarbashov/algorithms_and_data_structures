# Во всех задачах можно использовать универсальную имплементацию бинарного поиска
# из файла 01_binary_search_implementation.py
# но я для тренировки каждый раз буду реализовывать свою



# Задача #1
# В управлящий совет школы входят родители, учителя и учащиеся
# школы, причем родителей должно быть не менее одной трети
# от общего числа членов совета. В настоящий момент в совет входит
# N человек, из них K родителей
# Определите, сколько родителей нужно дополнительно ввести в совет,
# чтобы их число стало составлять не менее трети от числа членов совета.

# Решение #1 (первая интерпритация условия)
# Если новые родители не увеличивают общее число членов совета,
# а заменяют кого-то из других групп
def countParents1(n, k):
    l = k
    r = n

    while l < r:
        m = (l + r) // 2
        if m >= n / 3:
            r = m
        else:
            l = m + 1
    
    return l - k

print(countParents1(20, 3))

# Решение #2 (вторая интерпритация условия)
# Новые родители добавляются к общему числу членов совета
def countParents2(n, k):
    l = 0
    r = n
    
    while l < r:
        m = (l + r) // 2
        
        # здесь лучше не использовать деление, чтобы не работать с вещественными числами
        if (k + m) * 3 >= n + m:
            r = m
        else:
            l = m + 1
    return l

print(countParents2(20, 3)) # 6

# Проверка Решения ##2
# 0 => 3, 20 - NO
# 1 => 4, 21 - NO
# 2 => 5, 22 - NO
# 3 => 6, 23 - NO
# 4 => 7, 24 - NO
# 5 => 8, 25 - NO
# 6 => 9, 26 - YES